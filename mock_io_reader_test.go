// Code generated by pegomock. DO NOT EDIT.
// Source: io (interfaces: Reader)

package onepagestaticsite

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockReader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockReader() *MockReader {
	return &MockReader{fail: pegomock.GlobalFailHandler}
}

func (mock *MockReader) Read(_param0 []byte) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockReader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Read", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockReader) VerifyWasCalledOnce() *VerifierReader {
	return &VerifierReader{mock, pegomock.Times(1), nil}
}

func (mock *MockReader) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierReader {
	return &VerifierReader{mock, invocationCountMatcher, nil}
}

func (mock *MockReader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierReader {
	return &VerifierReader{mock, invocationCountMatcher, inOrderContext}
}

type VerifierReader struct {
	mock                   *MockReader
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierReader) Read(_param0 []byte) *Reader_Read_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Read", params)
	return &Reader_Read_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Reader_Read_OngoingVerification struct {
	mock              *MockReader
	methodInvocations []pegomock.MethodInvocation
}

func (c *Reader_Read_OngoingVerification) GetCapturedArguments() []byte {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Reader_Read_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
	}
	return
}
