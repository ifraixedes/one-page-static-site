// Code generated by pegomock. DO NOT EDIT.
// Source: io (interfaces: Reader)

package onepagestaticsite

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockReader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockReader(options ...pegomock.Option) *MockReader {
	mock := &MockReader{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockReader) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockReader) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockReader) Read(_param0 []byte) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockReader().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Read", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockReader) VerifyWasCalledOnce() *VerifierMockReader {
	return &VerifierMockReader{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockReader) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockReader {
	return &VerifierMockReader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockReader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockReader {
	return &VerifierMockReader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockReader) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockReader {
	return &VerifierMockReader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockReader struct {
	mock                   *MockReader
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockReader) Read(_param0 []byte) *MockReader_Read_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Read", params, verifier.timeout)
	return &MockReader_Read_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockReader_Read_OngoingVerification struct {
	mock              *MockReader
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockReader_Read_OngoingVerification) GetCapturedArguments() []byte {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockReader_Read_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
	}
	return
}
